name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  GO_VERSION: '1.25'

jobs:
  test:
    name: Test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}
        cache: true

    - name: Verify dependencies
      run: go mod verify

    - name: Build
      run: go build -v ./cmd/fast-cc-hooks

    - name: Run tests
      run: go test -race -coverprofile=coverage.out -covermode=atomic -v ./...

    - name: Run benchmarks
      run: go test -bench=. -benchmem -run=^$$ ./...

    - name: Upload coverage to Codecov
      if: matrix.os == 'ubuntu-latest'
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.out
        flags: unittests
        name: codecov-umbrella

  lint:
    name: Lint
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}
        cache: true

    - name: golangci-lint
      uses: golangci/golangci-lint-action@v6
      with:
        version: latest
        args: --timeout=5m

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}
        cache: true

    - name: Run Gosec Security Scanner
      run: |
        go install github.com/securego/gosec/v2/cmd/gosec@latest
        gosec -no-fail -fmt sarif -out gosec.sarif ./...

    - name: Upload SARIF file
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: gosec.sarif

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: [test, lint]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}
        cache: true

    - name: Build for multiple platforms
      run: |
        # Linux
        GOOS=linux GOARCH=amd64 go build -ldflags="-s -w" -o build/fast-cc-hooks-linux-amd64 ./cmd/fast-cc-hooks
        GOOS=linux GOARCH=arm64 go build -ldflags="-s -w" -o build/fast-cc-hooks-linux-arm64 ./cmd/fast-cc-hooks
        
        # macOS
        GOOS=darwin GOARCH=amd64 go build -ldflags="-s -w" -o build/fast-cc-hooks-darwin-amd64 ./cmd/fast-cc-hooks
        GOOS=darwin GOARCH=arm64 go build -ldflags="-s -w" -o build/fast-cc-hooks-darwin-arm64 ./cmd/fast-cc-hooks
        
        # Windows
        GOOS=windows GOARCH=amd64 go build -ldflags="-s -w" -o build/fast-cc-hooks-windows-amd64.exe ./cmd/fast-cc-hooks

    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: binaries
        path: build/

  docker:
    name: Docker
    runs-on: ubuntu-latest
    needs: [test, lint]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to GitHub Container Registry
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ghcr.io/${{ github.repository }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  validate-commits:
    name: Validate Commits
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}
        cache: true

    - name: Build fast-cc-hooks
      run: go build -o fast-cc-hooks ./cmd/fast-cc-hooks

    - name: Validate commit messages
      run: |
        # Get all commits in this PR
        git log --format="%s" origin/${{ github.base_ref }}..HEAD | while read -r commit_msg; do
          echo "Validating: $commit_msg"
          ./fast-cc-hooks validate "$commit_msg" || exit 1
        done